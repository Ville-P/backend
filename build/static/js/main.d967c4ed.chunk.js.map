{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","onSubmit","newName","newNumber","onNameChange","onNumberChange","value","onChange","type","PersonFilter","filterValue","PersonList","persons","onPress","map","person","name","Person","number","onClick","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","newPerson","existingPerson","length","edit","window","confirm","oldPerson","returnedPerson","concat","setTimeout","catch","error","ReactDOM","render","document","getElementById"],"mappings":"kMACMA,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,GAEZ,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,eChBvCM,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAASC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,aAAcC,EAA9C,EAA8CA,eAA9C,OACjB,8BACE,uBAAMJ,SAAUA,EAAhB,UACE,yCACQ,uBAAOK,MAAOJ,EAASK,SAAUH,OAEzC,2CACU,uBAAOE,MAAOH,EAAWI,SAAUF,OAE7C,8BACE,wBAAQG,KAAK,SAAb,yBAMFC,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaH,EAAf,EAAeA,SAAf,OACnB,sDACqB,uBAAOD,MAAOI,EAAaH,SAAUA,QAItDI,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,QAAX,OACjB,8BACGD,EAAQE,KAAK,SAACC,GAAD,OACZ,cAAC,EAAD,CAA0BA,OAAQA,EAAQF,QAASA,GAAtCE,EAAOC,YAKpBC,EAAS,SAAC,GAAD,IAAEF,EAAF,EAAEA,OAAQF,EAAV,EAAUA,QAAV,OACb,gCACGE,EAAOC,KADV,IACiBD,EAAOG,OACtB,wBAAQC,QAAS,kBAAMN,EAAQE,IAA/B,wBAIEK,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASb,EAAW,EAAXA,KAC/B,OAAgB,OAAZa,EACK,KAIP,qBAAKC,UAAWd,EAAhB,SACGa,KAmHQE,EA9GH,WACV,MAA+BC,mBAAS,IAAxC,mBAAQZ,EAAR,KAAiBa,EAAjB,KACA,EAAgCD,mBAAS,IAAzC,mBAAQtB,EAAR,KAAiBwB,EAAjB,KACA,EAAoCF,mBAAS,IAA7C,mBAAQrB,EAAR,KAAmBwB,EAAnB,KACA,EAAoCH,mBAAS,IAA7C,mBAAQI,EAAR,KAAmBC,EAAnB,KACA,EAAwCL,mBAAS,MAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4CP,mBAAS,MAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACRC,IAEG3C,MAAK,SAAA4C,GACJX,EAAWW,QAEd,IAEH,IA2EMC,EAAiBT,EAEnBhB,EAAQ0B,QAAO,SAAAvB,GAAM,OAAIA,EAAOC,KAAKuB,cAAcC,SAASZ,EAAUW,kBADtE3B,EAGJ,OACE,gCACE,2CACA,cAAC,EAAD,CAAcS,QAASS,EAActB,KAAM,UAC3C,cAAC,EAAD,CAAca,QAASW,EAAgBxB,KAAM,YAC7C,cAAC,EAAD,CAAcE,YAAakB,EAAWrB,SAbf,SAACkC,GAC1BZ,EAAaY,EAAMC,OAAOpC,UAaxB,2CACA,cAAC,EAAD,CAAYL,SAtFE,SAACwC,GACjBA,EAAME,iBACN,IAAIC,EAAY,CAAE5B,KAAMd,EAASgB,OAAQf,GACrC0C,EAAiBjC,EAAQ0B,QAAO,SAAAvB,GAAM,OAAIA,EAAOC,OAASd,KAC9D,GAAI2C,EAAeC,OAAS,EAAG,CAC7B,IAAIC,EAAOC,OAAOC,QAAP,UAAkB/C,EAAlB,2EACPgD,EAAYL,EAAe,GAwB/B,OAvBIE,GACFZ,EACUe,EAAUrD,GAAI+C,GACrBpD,MAAK,SAAA2D,GACJ1B,EAAWb,EAAQ0B,QAAO,SAAAvB,GAAM,OAAIA,EAAOlB,KAAOqD,EAAUrD,MAAIuD,OAAOD,IACvElB,EAAkB,WAAD,OACJ/B,IAEbmD,YAAW,WACPpB,EAAkB,QACnB,QAEJqB,OAAM,SAAAC,GACLxB,EAAgB,kBAAD,OACK7B,EADL,0CAGfmD,YAAW,WACTtB,EAAgB,QACf,QAGTL,EAAW,SACXC,EAAa,IAGfQ,EACUS,GACPpD,MAAK,SAAA2D,GACJ1B,EAAWb,EAAQwC,OAAOD,OAE9BlB,EAAkB,SAAD,OACN/B,IAEXmD,YAAW,WACPpB,EAAkB,QACnB,KACHP,EAAW,IACXC,EAAa,KA0CsBzB,QAASA,EAASC,UAAWA,EAAWC,aAvBlD,SAACqC,GAC1Bf,EAAWe,EAAMC,OAAOpC,QAsBqFD,eAnBpF,SAACoC,GAC1Bd,EAAac,EAAMC,OAAOpC,UAmBxB,yCACA,cAAC,EAAD,CAAYM,QAASyB,EAAexB,QAzCnB,SAACqC,GAChBF,OAAOC,QAAP,iBAAyBC,EAAUlC,KAAnC,QACFmB,EACQe,EAAUrD,IACjBL,KACCiC,EAAWb,EAAQ0B,QAAO,SAAAvB,GAAM,OAAIA,EAAOlB,KAAOqD,EAAUrD,QAE9DoC,EAAkB,WAAD,OACJiB,EAAUlC,OAEvBqC,YAAW,WACPpB,EAAkB,QACnB,aC7HTuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d967c4ed.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst PersonForm = ({onSubmit, newName, newNumber, onNameChange, onNumberChange}) => (\n  <div>\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={newName} onChange={onNameChange}/>\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={onNumberChange}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  </div>\n)\n\nconst PersonFilter = ({filterValue, onChange}) => (\n  <div>\n    filter shown with: <input value={filterValue} onChange={onChange}/>\n  </div>\n)\n\nconst PersonList = ({persons, onPress}) => (\n  <div>\n    {persons.map( (person) =>\n      <Person key={person.name} person={person} onPress={onPress}/>\n    )}\n  </div>\n)\n\nconst Person = ({person, onPress}) => (\n  <div>\n    {person.name} {person.number}\n    <button onClick={() => onPress(person)}>delete</button>\n  </div>\n)\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n    .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    let newPerson = { name: newName, number: newNumber}\n    let existingPerson = persons.filter(person => person.name === newName)\n    if (existingPerson.length > 0) {\n      let edit = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      let oldPerson = existingPerson[0]\n      if (edit) {\n        personService\n          .update(oldPerson.id, newPerson)\n          .then(returnedPerson => {\n            setPersons(persons.filter(person => person.id !== oldPerson.id).concat(returnedPerson))\n            setSuccessMessage(\n              `Updated ${newName}`\n            )\n            setTimeout(() => {\n                setSuccessMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setErrorMessage(\n              `Information of ${newName} has already been removed from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n      setNewName('')\n      setNewNumber('')\n      return\n    }\n    personService\n      .create(newPerson)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n      })\n    setSuccessMessage(\n      `Added ${newName}`\n    )\n    setTimeout(() => {\n        setSuccessMessage(null)\n    }, 5000)\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const removePerson = (oldPerson) => {\n    if (window.confirm(`Delete ${oldPerson.name}?`)) {\n      personService\n      .remove(oldPerson.id)\n      .then(\n        setPersons(persons.filter(person => person.id !== oldPerson.id))\n      )\n      setSuccessMessage(\n        `Removed ${oldPerson.name}`\n      )\n      setTimeout(() => {\n          setSuccessMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const personsToShow = !newFilter\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={\"error\"}/>\n      <Notification message={successMessage} type={\"success\"}/>\n      <PersonFilter filterValue={newFilter} onChange={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm onSubmit={addPerson} newName={newName} newNumber={newNumber} onNameChange={handlePersonChange} onNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <PersonList persons={personsToShow} onPress={removePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}